#! /usr/bin/python3
#======================================================================
# NAME
#   genrules.py - Generate Squid rules from CSV file(s)
#
# SYNOPSIS
#   genrules.py [[-s {src}] [-d {dst}]] [-h]
#
# DESCRIPTION
#   This script will generate a Squid ruleset from all csv files found
#   in a specified directory.
#
# OPTIONS
#   -h, --help         show this help message and exit
#   -s src, --src src  set rule directory where csv file are located
#   -d dst, --dst dst  set filename for Squid ruleset to save to
#
# EXAMPLE
#   file: /etc/squid/rules.d/master.conf
#       src,dstdomain,port
#       192.168.1.120-192.168.1.130 192.168.200.0/24,.acme.com,80 443
#       10.0.100.10,.limitedaccess.com,443
#
#   # genrules.py /etc/squid/rules.d > /etc/squid/autogenerated.d/rules.conf
#   # cat /etc/squid/autogenerated.d/rules.conf
#   acl master_0_dst dstdomain .acme.com
#   acl master_0_port port 443
#   acl master_0_port port 80
#   acl master_0_src src 192.168.1.120-192.168.1.130
#   acl master_0_src src 192.168.200.0/24
#   acl master_1_dst dstdomain .limitedaccess.com
#   acl master_1_port port 443
#   acl master_1_src src 10.0.100.10
#   http_access allow master_0_src master_0_dst master_0_port
#   http_access allow master_1_src master_1_dst master_1_port
#   http_access allow master_2_src master_2_dst master_2_port
#
# SEE ALSO
#   squid(8), python(1), /etc/squid/squid.conf
#
# AUTHOR
#   Stefan Benediktsson / Defensify AB
#
# HISTORY
#   v1.0    - Feb 09, 2023  - Initial version
#======================================================================

import csv
import sys
import os
import datetime
import argparse


#--------------------------------------------------
# Define defaults
#--------------------------------------------------
rulesrc = "/etc/squid/rules.d"
ruledst = "/etc/squid/autogenerated.d/rules.conf"



#--------------------------------------------------
# getArguments()
#   Read command line arguments
#--------------------------------------------------
def getArguments():
    global rulesrc
    global ruledst
    parser = argparse.ArgumentParser(
        prog = 'genrules.py', description='Generate Squid ruleset from CSV files', epilog=''
    )
    #------------------------------
    # Set rulesrc
    #------------------------------
    parser.add_argument(
        '-s', '--src',
        metavar='src',
        help='set rule directory where csv file are located',
        dest='rulesrc',
        default=rulesrc,
        required=False)
    #------------------------------
    # Set ruledst
    #------------------------------
    parser.add_argument(
        '-d', '--dst',
        metavar='dst',
        help='set filename for Squid ruleset to save to',
        dest='ruledst',
        default=ruledst,
        required=False)
    args = parser.parse_args()
    rulesrc = args.rulesrc
    ruledst = args.ruledst


#--------------------------------------------------
# fixList(lst) - Sort and remove duplicates from list
#--------------------------------------------------
def fixList(lst):
    # sort the list
    lst.sort()
    # initialize a new list to store the unique elements
    result = []
    # iterate through the list and add only unique elements to the result list
    for element in lst:
        if element not in result:
            result.append(element)
    return result


#--------------------------------------------------
# writeRuleset()
#   write collated ruleset to file
#--------------------------------------------------
def writeRuleset(rules):
    global ruledst
    try:
        f = open(ruledst,"w")
    except:
        print(f'ERROR: Unable to write to {ruledst}.')
    #------------------------------
    # Write rules to file
    #------------------------------
    date = datetime.datetime.now()
    f.write("#======================================================================\n")
    f.write("# Autogenerated by /etc/squid/bin/genrules.py\n")
    f.write(f'# Date: {date}\n')
    f.write("#======================================================================\n")
    rtype_prev="acl"
    for rule in rules:
        rtype = rule.split(" ")[0]
        if rtype not in rtype_prev:
            f.write("#----------------------------------------------------------------------\n")
        rtype_prev = rtype
        f.write(f'{rule}\n')


#--------------------------------------------------
# main()
#   Main function
#--------------------------------------------------
def main():
    global rulesrc
    global ruledst
    OUT = []
    squidrule = []
    #------------------------------
    # Parse comman line paramters
    #------------------------------
    getArguments()
    #------------------------------
    # Check if rulesrc is a directory
    #------------------------------
    if not os.path.isdir(rulesrc):
        print(f'ERROR: {rulesrc} is not a directory.')
        sys.exit(1)
    #------------------------------
    # Loop through files in directory
    #------------------------------
    for filename in os.listdir(rulesrc):
        rule = os.path.splitext(os.path.basename(filename))[0]
        filepath = os.path.join(rulesrc, filename)
        if os.path.isfile(filepath):
            #------------------------------
            # Read file
            #------------------------------
            with open(filepath, 'r') as file:
                reader = csv.reader(file)
                header = next(reader)   # Get CSV header
                n=0
                for row in reader:
                    if len(row) > 0:
                        row[0].strip()
                        if not row[0].startswith("#"):
                            for h, v in zip(header, row):
                                v = v.split()
                                if h=="dstdomain":
                                    hh="dst"
                                else:
                                    hh=h
                                #------------------------------
                                # Append ACL object
                                #------------------------------
                                for vv in v:
                                    OUT.append(f'{rule}_{n}_{hh}')
                                    squidrule.append(f"acl {rule}_{n}_{hh} {h} {vv}")
                            #------------------------------
                            # Append ACL rule
                            #------------------------------
                            RULE = "http_access allow "
                            if f'{rule}_{n}_src' in OUT:
                                RULE = RULE + f' {rule}_{n}_src'
                            if f'{rule}_{n}_dst' in OUT:
                                RULE = RULE + f' {rule}_{n}_dst'
                            if f'{rule}_{n}_port' in OUT:
                                RULE = RULE + f' {rule}_{n}_port'
                            squidrule.append(RULE)
                            #squidrule.append(f"http_access allow {rule}_{n}_src {rule}_{n}_dst {rule}_{n}_port")
                            #squidrule.append(f"http_access deny {rule}_{n}_src !{rule}_{n}_dst")
                            n = n+1

    squidrule = fixList(squidrule)  # sort and dedup list
    writeRuleset(squidrule)         # write ruleset to file
    sys.exit(0)


#--------------------------------------------------
# Default startup function
#--------------------------------------------------
if __name__ == "__main__":
    main()
